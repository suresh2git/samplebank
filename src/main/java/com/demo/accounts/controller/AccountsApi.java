/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.accounts.controller;

import com.demo.accounts.model.Account;
import com.demo.accounts.model.ApiErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-12T14:12:51.963959300+05:30[Asia/Calcutta]")

@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /accounts : adds a new account
     * Add a new account in the db
     *
     * @param account The new account data in JSON format (required)
     * @return Created. Body contains the newly created account. (status code 201)
     *         or Internal Server error (status code 500)
     */
    @ApiOperation(value = "adds a new account", nickname = "addAccount", notes = "Add a new account in the db", response = Account.class, tags={ "Account Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created. Body contains the newly created account.", response = Account.class),
        @ApiResponse(code = 500, message = "Internal Server error") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Account> addAccount(@ApiParam(value = "The new account data in JSON format" ,required=true )  @Valid @RequestBody Account account) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1, \"accountName\" : \"saving\", \"accountHolderName\" : \"name1\", \"ifsc\" : \"12345\", \"currency\" : \"rupees\", \"country\" : \"IND\", \"balance\" : 10000.0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accounts/{accountId} : delete an existing account
     * Deletes an existing account in the db.
     *
     * @param accountId the id of the account to delete (required)
     * @return The account was deleted (status code 204)
     *         or Customer Not Found with given id (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "delete an existing account", nickname = "deleteAccount", notes = "Deletes an existing account in the db.", tags={ "Account Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The account was deleted"),
        @ApiResponse(code = 404, message = "Customer Not Found with given id", response = ApiErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/accounts/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteAccount(@ApiParam(value = "the id of the account to delete",required=true) @PathVariable("accountId") Integer accountId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{accountId} : get account by id
     * get account present in db by id
     *
     * @param accountId the id of the account (required)
     * @return Success. Body contains the given id account details. (status code 200)
     *         or Account Not Found with given id. (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get account by id", nickname = "getAccount", notes = "get account present in db by id", response = Account.class, tags={ "Account Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success. Body contains the given id account details.", response = Account.class),
        @ApiResponse(code = 404, message = "Account Not Found with given id.", response = ApiErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/accounts/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Account> getAccount(@ApiParam(value = "the id of the account",required=true) @PathVariable("accountId") Integer accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1, \"accountName\" : \"saving\", \"accountHolderName\" : \"name1\", \"ifsc\" : \"12345\", \"currency\" : \"rupees\", \"country\" : \"IND\", \"balance\" : 10000.0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts : reads a account&#39;s data
     * This operation provides a view of all the accounts data in JSON.
     *
     * @return successful. Body contains the list of accounts. (status code 200)
     *         or There is no accounts present in db. (status code 404)
     */
    @ApiOperation(value = "reads a account's data", nickname = "getAccounts", notes = "This operation provides a view of all the accounts data in JSON.", response = Account.class, responseContainer = "List", tags={ "Account Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful. Body contains the list of accounts.", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "There is no accounts present in db.", response = ApiErrorResponse.class) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Account>> getAccounts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1, \"accountName\" : \"saving\", \"accountHolderName\" : \"name1\", \"ifsc\" : \"12345\", \"currency\" : \"rupees\", \"country\" : \"IND\", \"balance\" : 10000.0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accounts/{accountId} : update existing account
     * Updates an existing account with new data
     *
     * @param accountId the id of the account to update (required)
     * @param account the updatable account data in JSON format (required)
     * @return Success. Body contains updated account details. (status code 200)
     *         or Account Not Found with given id (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "update existing account", nickname = "updateAccount", notes = "Updates an existing account with new data", response = Account.class, tags={ "Account Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success. Body contains updated account details.", response = Account.class),
        @ApiResponse(code = 404, message = "Account Not Found with given id", response = ApiErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/accounts/{accountId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Account> updateAccount(@ApiParam(value = "the id of the account to update",required=true) @PathVariable("accountId") Integer accountId,@ApiParam(value = "the updatable account data in JSON format" ,required=true )  @Valid @RequestBody Account account) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 1, \"accountName\" : \"saving\", \"accountHolderName\" : \"name1\", \"ifsc\" : \"12345\", \"currency\" : \"rupees\", \"country\" : \"IND\", \"balance\" : 10000.0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
